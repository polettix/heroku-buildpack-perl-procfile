#!/usr/bin/env bash
# vim: ft=sh :

CPANM='https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm'

main() {
   # fail fast and fail hard
   set -eo pipefail

   local BUILD_DIR="$(ensure_dir "$1")"
   local CACHE_DIR="$(ensure_dir "$2")"
   local ENV_DIR="$(ensure_dir "$3")"

   if [ -n "$BUILDPACK_VERBOSE" ] ; then
      echo "-----> 'compile' parameters"
      (
         env | sort
         echo ''
         echo "BUILD_DIR [$BUILD_DIR]"
         ls -l "$BUILD_DIR"
         echo "CACHE_DIR [$CACHE_DIR]"
         ls -l "$CACHE_DIR"
         echo "ENV_DIR   [$ENV_DIR]"
         ls -l "$ENV_DIR"
      ) | indent
   fi

   # not sure these actually make sense here, but they don't harm anyway
   export PATH="$BUILD_DIR/local/bin:$PATH"
   export PERL5LIB="$BUILD_DIR/local/lib/perl5:$PERL5LIB"

   # reuse last compilations if available
   copy_local "$CACHE_DIR" "$BUILD_DIR"

   # build what's necessary
   build "$BUILD_DIR" "$ENV_DIR"

   # save compilation in cache for future reuse
   [ -d "$BUILD_DIR/local" ] && copy_local "$BUILD_DIR" "$CACHE_DIR"

   # prepare files with environment for run stage
   prepare_run_environment "$BUILD_DIR"

   return 0
}

_get_var() {
   local VARFILE="$1"
   local DEFAULT="$2"
   if [ -e "$VARFILE" ] ; then
      cat "$VARFILE"
   else
      echo "$DEFAULT"
   fi
}

__build_bootstrap_cpanm() {
   curl -L --silent "$CPANM"        \
      | perl - App::cpanminus 2>&1  \
         --quiet                    \
         --notest                   \
         --no-man-pages             \
         $CPANM_OPTS                \
         -l "$BUILD_DIR/local"      \
      | indent
}

__build_install_dependencies_add_epan_dirs() {
   # sweep possible DarkPAN candidates
   local _d d
   for _d in epan dpan ; do
      d="$PWD/$_d"
      [ -d "$d" ] || continue
      EPAN=("${EPAN[@]}" '--mirror' "file://$d")
   done

   # if something was actually found, insist on using mirrors only
   # and make sure www.cpan.org is present but at the end, so that it
   # can be overridden
   if [ "${#EPAN[@]}" -gt 0 ] ; then
      # append "usual" mirrors and use mirrors for index
      EPAN=("${EPAN[@]}" '--mirror' 'http://www.cpan.org' '--mirror-only')
   fi
}

__build_install_dependencies_cpanm() {
   # now do the actual installation heavylifting
   cpanm 2>&1                 \
      --no-man-pages          \
      $CPANM_OPTS             \
      $(_get_var "$ENV_DIR/BUILDPACK_CPANM_VERBOSE" '--quiet') \
      $(_get_var "$ENV_DIR/BUILDPACK_CPANM_TEST" '--notest')   \
      -l "$BUILD_DIR/local"   \
      "${EPAN[@]}"            \
      "$@"                    \
      | indent
}

# Expects the following variables to be set:
# BUILD_DIR (to reach "$BUILD_DIR/local")
# CPANM_OPTS
# ENV_DIR
# EPAN
__build_install_dependencies() {
   # this will contain all our local DarkPANs, safely across
   # recursive calls (i.e. it will accumulate ancestors but not
   # clutter them or siblings
   declare -a EPAN=("${EPAN[@]}")
   __build_install_dependencies_add_epan_dirs

   [ -e gitpanfile ] && __build_install_dependencies_gitpanm

   __build_install_dependencies_cpanm --installdeps .
}

__build_install_dependencies_gitpanm() {
   local GPM_DIR="$BUILD_DIR/local/gitpanm"
   mkdir -p "$GPM_DIR"
   cat gitpanfile | while read name repo commit ; do
      # subshell here, yay! Get the code
      cd "$GPM_DIR"
      [ -d "$name" ] || git clone "$repo" "$name"
      cd "$name"
      [ -n "$commit" ] && git checkout "$commit"

      # recurse
      __build_install_dependencies

      # install the very library
      cd "$GPM_DIR"
      __build_install_dependencies_cpanm "./$name"
   done
}

build() {
   local BUILD_DIR="$1"
   local ENV_DIR="$2"
   declare -a EPAN=()

   # execute in subshell to avoid change directory side effects
   (
      cd "$BUILD_DIR"

      if [ ! -e "$BUILD_DIR/local/bin/cpanm" ]; then
         echo "-----> Bootstrapping cpanm"
         __build_bootstrap_cpanm
      fi

      echo "-----> Installing dependencies"
      __build_install_dependencies --installdeps .
   )
}

prepare_run_environment() {
   local BUILD_DIR="$1"

   mkdir -p "$BUILD_DIR/.profile.d"
   cat > "$BUILD_DIR/.profile.d/perl-env.sh" <<'END'
export PATH="$HOME/local/bin:$HOME/bin:$PATH"
export PERL5LIB="$HOME/local/lib/perl5:$PERL5LIB"
END
}

copy_local() {
   local SOURCE_DIR="$1"
   local DESTINATION_DIR="$2"
   rm -rf "$DESTINATION_DIR/local"
   if [ -d "$SOURCE_DIR/local" ]; then
      cp -a "$SOURCE_DIR/local" "$DESTINATION_DIR"
   fi
}

ensure_dir() {
   mkdir -p "$1"
   readlink -f "$1"
}

indent() {
  sed -u 's/^/       /'
}

main "$@"
